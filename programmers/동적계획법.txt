동적계획법(Dynamic Programming)

N으로 표현

(문제의 답인지를 확인해야 하는 범위를 진전 하면서 동적으로 결정한다는 뜻.)

주어진 최적화 문제를 
재귀적인 방식으로 보다 작은 부분 문제로 나누어
부분 문제를 풀어, 이 해를 조합하여 전체 문제의 해답에 이르는 방식

알고리즘의 진행에 따라 탐색해야 할 범위를 *동적으로 결정*함으로써 탐색 범위를 한정할 수 있음

ex)
*피보나치 수열 -> Recursive function

f(4) = f(3)               + f(2)
     = f(2)        + f(1) + f(1) + f(0)
     = f(1) + f(0) + f(1) + f(1) + f(0)

복잡도는 지수 함수의 형태

-> 동적계획법을 사용한다면?

f(0) = 0,   f(1) = 1
f(2) = f(1) + f(0) = 1
f(3) = f(2) + f(1) = 2
f(4) = f(3) + f(2) = 3

복잡도는 선형 함수의 형태

*Knapsack Problem
가장 높은 값을 가지도록 물건들을 골라 배낭에 담으시오.

*N으로 표현
문제의 해결 - 동적계획법으로 설계
N을 한 번 사용해서 만들 수 있는 수(들) -> 1
N을 두 번 사용해서 만들 수 있는 수(들) -> 2
N을 세 번 사용해서 만들 수 있는 수(들) -> 3
...

N = 5
1번 --> 5
2번 --> 55 (1 사칙연산 1) 10 0 25 1
3번 --> 555 (1 사칙연산 2) (2 사칙연산 1)
4번 --> 5555 (1 3) (2 2) (3 1)
5번 --> 55555 (2 3) (3 2) (1 4) (4 1)

N = x
n번 --> 'x' * n (1 n-1) (2 n-2) ... (n-1 1)

요약 : 문제의 성질에 따라, 동적계획법으로 풀어냄으로써
      탐색해야 하는 범위를 효과적으로 줄일 수 있음

unordered_set : 중복된 값을 담지 않고 싶을때

